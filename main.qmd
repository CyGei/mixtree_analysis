---
title: "Assess the performance of the `epitree` test"
format:
  html:
    embed-resources: true
    self-contained-math: true
execute: 
  warning: false
  message: false
---

# Load libraries and helper functions
```{r setup}
source("R/packages.R")
source("R/helpers.R")
dir.create("data", recursive = TRUE, showWarnings = FALSE)
```

# Grid parameters

This analysis explores the test results for the following parameter combinations.

```{r grid-parameters}
sample_sizes <- c(20, 50, 100, 200) # posterior sample size
overlap_freqs <- seq(0, 1, by = 0.2) # % of trees in the chain drawn from the same distribution
epidemic_sizes <- c(20, 50, 100, 200) # number of nodes in the transmission tree
```

# Outbreak simulation

We generate 2 outbreak scenarios:

-   **Scenario A:** Superspreading (Negative Binomial: R=2, k=0.1)

-   **Scenario B:** No overdispersion (Poisson: R=2)

## Generate and save simulations
The below will create 100 simulations of `A` and `B`, for each epidemic size, respectively.
```{r simulation-parameters}
R_values_A <- rnbinom(100, size = 0.1, mu = 2)
R_values_B <- rpois(100, lambda = 2)
tolerance <- 0.2 # Allow number of cases to deviate by 20% from the target size
n_simulations <- 100
max_attempts <- n_simulations * 100
try_gain <- 0.7 # run the loop again if we reach 70% or more of the target n_simulations
```

```{r simulation-run}
dir.create("data/sims", recursive = TRUE, showWarnings = FALSE)
future::plan("future::multisession", workers = length(epidemic_sizes))
future_walk(seq_along(epidemic_sizes), function(i) {
  N <- epidemic_sizes[i]
  
  sim <- list(
    A = simulate_outbreaks(
      target_size = N,
      R_values = R_values_A,
      tolerance = tolerance,
      n_simulations = n_simulations,
      max_attempts = max_attempts,
      try_gain = try_gain
    ),
    B = simulate_outbreaks(
      target_size = N,
      R_values = R_values_B,
      tolerance = tolerance,
      n_simulations = n_simulations,
      max_attempts = max_attempts,
      try_gain = try_gain
    )
  )
  
  save_safely(sim, paste0("data/sims/sims_", i, ".rds"))
}, .options = furrr_options(seed = 123))
```

## Identify and save pairs of simulations
The below will identify pairs of simulations (`A` and `B`) that have the same number of cases and will save them, for each epidemic size category.
```{r}
dir.create("data/pairs", recursive = TRUE, showWarnings = FALSE)
future_walk(seq_along(epidemic_sizes), function(i) {
  sim <- readRDS(paste0("data/sims/sims_", i, ".rds"))
  offset <- (i - 1) * n_simulations
  
  matching_pairs(sim[["A"]], sim[["B"]], n = n_simulations) |>
    iwalk(~ save_safely(.x, paste0("data/pairs/pair_", offset + .y, ".rds")))
}, .options = furrr_options(seed = 123))
```


# Metadata / parameter grid
The below represents the complete parameter grid for our performance analysis.
```{r matching_pairs}
# save metadata
metadata <-  expand.grid(
  pair_id = as.character(seq_along(list.files("data/pairs"))),
  overlap_freq = overlap_freqs,
  sample_size = sample_sizes,
  stringsAsFactors = TRUE 
) |> 
  mutate(epidemic_size = rep(epidemic_sizes, each = n_simulations)[as.numeric(pair_id)])

save_safely(metadata, file = "data/metadata.rds")
```

# Compare chains
The code analyses pairs of simulated outbreaks with different transmission patterns: `A` includes superspreading events while `B` has no overdispersion. For each pair, it generates posterior transmission trees using `outbreaker2`. The resulting posterior chains (`chainA` and `chainB`) are compared using either `adonis` or `chi-square` tests, with parameters specified in `metadata`. Each test is repeated multiple times (`n_repeats`).

## Build chains
The below will apply `oubtreaker2` to obtain posterior distributions of transmission trees for `A` and `B`, respectively.
```{r compare_chains}
dir.create("data/chains", recursive = TRUE, showWarnings = FALSE)
future::plan("future::multisession", workers = future::availableCores() - 1)
future_walk(unique(metadata$pair_id), function(id) {
  pair <- readRDS(paste0("data/pairs/pair_", id, ".rds"))
  chains <- list(
    A = build_chain(pair[["A"]], ctd_fraction = 0.5),
    B = build_chain(pair[["B"]], ctd_fraction = 0.65)
  )
  save_safely(chains, paste0("data/chains/chain_", id, ".rds"))
}, .options = furrr_options(seed = 123))

```

## Compute the p-values

```{r}
dir.create("data/p_values", recursive = TRUE, showWarnings = FALSE)

# PERMANOVA (adonis)
dir.create("data/p_values/adonis", recursive = TRUE, showWarnings = FALSE)
future_walk(asplit(metadata, 1), function(param) {
  chains <- readRDS(paste0("data/chains/chain_", param[["pair_id"]], ".rds"))
  
  p_value <- get_pval(
    chainA = chains$A,
    chainB = chains$B,
    overlap_freq = as.double(param[["overlap_freq"]]),
    sample_size = as.integer(param[["sample_size"]]),
    n_repeats = 100L
  )
  
  save_safely(p_value, paste0("data/p_values/adonis/p_values_", param[["pair_id"]], ".rds"))
}, .options = furrr_options(seed = 123))

#Chisq test
dir.create("data/p_values/chisq", recursive = TRUE, showWarnings = FALSE)
future_walk(asplit(metadata, 1), function(param) {
  chains <- readRDS(paste0("data/chains/chain_", param[["pair_id"]], ".rds"))
  
  p_value <- get_pval(
    chainA = chains$A,
    chainB = chains$B,
    overlap_freq = as.double(param[["overlap_freq"]]),
    sample_size = as.integer(param[["sample_size"]]),
    n_repeats = 100L,
    method = "chisq",
    args = list(simulate.p.value = TRUE, B = 999)
  )
  
  save_safely(p_value, paste0("data/p_values/chisq/p_values_", param[["pair_id"]], ".rds"))
}, .options = furrr_options(seed = 123))
```

# Results
```{r load-metadata}
metadata <- readRDS("data/metadata.rds")
```

## Adonis
```{r adonis-results}
adonis_results <- metadata %>%
  mutate(
    p_value = map(seq_len(n()), ~readRDS(paste0("data/p_values/adonis/p_values_", .x, ".rds"))),
    overlap_freq = as.factor(overlap_freq),
    epidemic_size = as.factor(epidemic_size),
    sample_size = as.factor(sample_size)
  ) %>%
  tidyr::unnest_longer(p_value, indices_to = "replicate")

plot_props(adonis_results)
plot_roc(adonis_results,
         group_vars = c("sample_size", "epidemic_size"),
         facet_cols = "epidemic_size",
         col_title = "Epidemic Size",
         color_var = "sample_size")
```


## Chi-square
```{r xsq-results}
chisq_results <- metadata %>%
  mutate(
    p_value = map(seq_len(n()), ~readRDS(paste0("data/p_values/chisq/p_values_", .x, ".rds"))),
    overlap_freq = as.factor(overlap_freq),
    epidemic_size = as.factor(epidemic_size),
    sample_size = as.factor(sample_size)
  ) %>%
  tidyr::unnest_longer(p_value, indices_to = "replicate")

plot_props(chisq_results)

plot_roc(chisq_results,
         group_vars = c("sample_size", "epidemic_size"),
         facet_cols = "epidemic_size",
         col_title = "Epidemic Size",
         color_var = "sample_size")

```


## Compare Methods

```{r compare-methods}
results <- bind_rows(
  adonis_results %>% mutate(method = "PERMANOVA"),
  chisq_results %>% mutate(method = "χ² test")
) |> mutate(method = factor(method, levels = c("χ² test", "PERMANOVA") ))

roc_df <- get_roc(results,
                  group_vars = c("sample_size", "epidemic_size", "method"))
plot_roc(roc_df,
         facet_rows = "method",
         facet_cols = "epidemic_size",
         row_title = "Method",
         col_title = "Epidemic Size",
         color_var = "sample_size",
         color_palette = "Purples")

```
